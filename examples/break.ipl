val fun (I interface) ++ (J interface) interface = meth {
  false: I,
  true: J
};
val fun !(x bool) = x ? false : true;

val i_range interface = meth(_ i32) void;
val range type = i_range => void;
val i_break interface = meth(_ i32) bool;

assert catch is
dep(b type) ->
dep(i interface) ->
dep(a type) ->
dep(f b -> i => a) ->
(i ++ (meth(_ b) enum{}) => a) ->
i => a;


val fun breakable(rng range) i_break => i32 =
catch(i32)(i_break)(i32)(fun(n) block { yield(n); })(
block {
  for c in rng {
    val x = do call(false@c);
    if !x { val y = do call(true@c); yield(do fun{}(y)); }
  }
  yield(-1);
});

val (+) = mod32::+;
val (*) = mod32::*;
val (<) = mod32::<;

// Example: compute integer square root of x.
val fun isqrt(x i32) = purify i32 {
  new square = new_i32(0);
  for i in breakable(0..x) {
    val old_square = get square;
    val new_square = old_square + 2 * i + 1;
    if x < new_square {
      yield(false);
    } else {
      square := new_square;
      yield(true);  // continue;
    }
  }
};

assert isqrt(9) = 3 is i32;
assert isqrt(10) = 3 is i32;
assert isqrt(100) = 10 is i32;
assert isqrt(120) = 10 is i32;

compile isqrt(x i32) i32 = block { yield(isqrt(x)); };

test isqrt(100) = 10;
test isqrt(120) = 10;
test isqrt(500*500 + 10) = 500;
